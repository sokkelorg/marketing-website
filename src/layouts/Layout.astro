---
import type { WithContext, Thing } from "schema-dts";
import { jsonLd } from "../json-ld";

export type Props = {
  /**
   * The title of the page. The ideal length is approximately 60 characters.
   * When exceeding this limit, search engines will truncate the title.
   *
   * @default Sokkel
   */
  title?: string;

  /**
   * The description of the page. The ideal length is between 70 and 155 characters.
   * Minimum length is 70 characters. When exceeding this limit, search engines will
   * truncate the description.
   *
   * @default Default description
   */
  description?: string;

  /**
   * The headline on the page. The ideal length is approximately 47 characters.
   *
   * @default title
   */
  headline?: string;

  /**
   * The heading on the page next to headline. Should be longer than headline.
   *
   * @default title
   */
  heading?: string;

  /**
   * The title for social media platforms. The ideal length is approximately 47 characters.
   * When exceeding this limit, platforms will truncate the title. LinkedIn will truncate
   * the title at 119 characters.
   *
   * @default Uses the title prop
   */
  socialMediaTitle?: string;

  /**
   * The description for social media platforms. Should not exceed 85 characters to fit most platforms.
   *
   * @default Uses the description prop
   */
  socialMediaDescription?: string;

  /**
   * Images for social media platforms. The ideal size is 1200 x 630 pixels.
   * When providing more than one image, the first image will be used, but some
   * platforms will allow the user to choose which image to use.
   *
   * @default ['/images/social-media-image.png']
   */
  images?: string[];

  /**
   * The type of the page.
   *
   * @default website
   */
  type?: "website" | "article";

  /**
   * The path of the page. Used to generate the canonical URL.
   */
  path?: string;

  /**
   * The date the page was published. Only used with type = 'article'.
   */
  articlePublishDate?: Date;

  /**
   * The date the page was last modified. Only used with type = 'article'.
   */
  articleAuthor?: string;

  /**
   * Set to false for pages that shouldn't have a contact form at the bottom.
   */
  contactFooter?: boolean;

  /**
   * JSON-LD structured data for the page.
   */
  schema?: WithContext<Thing> | WithContext<Thing>[];
};

const defaultDescription = `
Sokkel is the foundation and building blocks for managing your applications, smooooothly.
`;

const defaultTitle = "Sokkel";

const makeAssetURL = (newPath: string) =>
  new URL(`assets/${newPath}`, Astro.site).toString();
const makeURL = (newPath: string) => new URL(newPath, Astro.site).toString();

const defaultImage = new URL("/assets/sharing.png", Astro.site);

const {
  title = defaultTitle,
  description = defaultDescription,
  socialMediaTitle = title ?? defaultTitle,
  socialMediaDescription = description ?? defaultDescription,
  images = [defaultImage.toString()],
  type = "website",
  path = "/",
  schema,
} = Astro.props;

// const parsedImages = images.map((image) => parseSocialMediaImage(image));
// const [image] = parsedImages;

const [image] = images;
const canonical = new URL(path, Astro.site);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title set:text={title} />
    <meta property="og:site_name" content="Sokkel" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.svg" />

    <meta name="viewport" content="width=device-width" />
    <link type="text/plain" rel="author" href={makeURL("/humans.txt")} />

    <meta name="robots" content="index,follow" />
    <meta name="description" content={description} />
    {canonical && <link rel="canonical" href={canonical} />}

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={socialMediaTitle} />
    <meta name="twitter:description" content={socialMediaDescription} />
    <meta name="twitter:image" content={image} />

    <meta property="og:url" content={canonical} />
    <meta property="og:type" content={type} />
    <meta property="og:title" content={socialMediaTitle} />
    <meta property="og:description" content={socialMediaDescription} />
    {images.map((img) => <meta property="og:image" content={img} />)}

    <script
      data-goatcounter="https://sokkel.goatcounter.com/count"
      async
      src="//gc.zgo.at/count.js"></script>
    <script
      src="https://www.google.com/recaptcha/api.js?render=6LeEducqAAAAACnrF0X6R20PYHeblFtlN-ddQTGB"
      async
      defer></script>
  </head>
  <body>
    <div class="container">
      <slot />
    </div>
  </body>
</html>

<style>
  .container {
    max-width: 393px;
    margin-inline: auto;
    padding: 1.5rem;

    background: #ffffff;

    @media (min-width: 600px) {
      margin-block: 2rem;
      border-radius: 24px;
    }
  }
</style>

<style is:global>
  html,
  body {
    margin: 0;

    font-family:
      -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu,
      Cantarell, "Open Sans", "Helvetica Neue", sans-serif;

    background: #d9d9d9;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
  }

  @media (max-width: 440px) {
    body {
      background: black;
    }
  }

  .grecaptcha-badge {
    visibility: hidden;
  }
</style>
