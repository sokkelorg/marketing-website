---
import { client } from "../sanity-client.ts";
import imageUrlBuilder from "@sanity/image-url";

const builder = imageUrlBuilder(client);

function urlFor(source) {
  return builder.image(source);
}

const cards = await client.fetch(`
  *[_type == 'statement'] {
    _id,
    backgroundImage,
    statement,
    source,
    answers
  }
`);

const setStyle = (card) => {
  if (!card.backgroundImage) {
    return {};
  }

  const url = urlFor(card.backgroundImage).height(500).width(345).url();

  return {
    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url(${url})`,
  };
};
---

<section class="swipeables">
  <div class="swipeables-cards">
    {
      cards.map((card, index) => (
        <div
          class="swipeables-card"
          data-statement-id={card._id}
          data-agree-answer={card.answers?.agree}
          data-disagree-answer={card.answers?.disagree}
          style={setStyle(card)}
        >
          <p>{card.statement}</p>
          {card.source &&
            (card.source.url ? (
              <a
                href={card.source.url}
                target="_blank"
                rel="noopener noreferrer"
                class="source"
              >
                Source: {card.source.name} â†—
              </a>
            ) : (
              <span class="source">Source: {card.source.name}</span>
            ))}
        </div>
      ))
    }
  </div>

  <div class="swipeable-actions actions">
    <button class="button disagree-button" data-disagree-button>Disagree</button
    >
    <button class="button agree-button" data-agree-button>Agree</button>
  </div>

  <div class="no-more-cards">
    <div class="card gameover">
      <img src="assets/gameover.gif" alt="Game Over" />
      <img src="assets/gameover.svg" alt="Tap One of The Buttons" />
    </div>
    <div class="actions">
      <a href="#contact" class="button">Let's talk</a>
      <a href="https://tally.so/r/wb6R62" class="button">Fancy updates?</a>
    </div>
  </div>

  <script>
    const container = document.querySelector(".swipeables-cards");
    const allCards = document.querySelectorAll(".swipeables-card");
    const agreeButton = document.querySelector("[data-agree-button]");
    const disagreeButton = document.querySelector("[data-disagree-button]");

    const isMobile = window.matchMedia("(max-width: 600px)").matches;

    // Returns a UUID stored in localStorage, or create a new
    function getSessionID() {
      const sessionID = localStorage.getItem("sessionID");
      if (sessionID) return sessionID;

      // Check if we have self.crypto.randomUUID
      if (window.crypto && window.crypto.randomUUID) {
        const newSessionID = window.crypto.randomUUID();
        localStorage.setItem("sessionID", newSessionID);
        return newSessionID;
      }

      // Fallback to Math.random
      const newSessionID = Math.random().toString(36).substring(2);
      localStorage.setItem("sessionID", newSessionID);
      return newSessionID;
    }

    function submitFeedback(feedback, statementId) {
      grecaptcha.ready(function () {
        const sessionID = getSessionID();
        grecaptcha
          .execute("6LeEducqAAAAACnrF0X6R20PYHeblFtlN-ddQTGB", {
            action: "submit",
          })
          .then(function (token) {
            const body = {
              session_id: sessionID,
              statement_id: statementId,
              feedback,
              recaptcha_token: token,
            };

            console.log("Submitted", body);
            fetch("https://feedback-api.sokkel.app/submit", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(body),
            });
          });
      });
    }

    function setButtonText(card) {
      if (card.dataset.agreeAnswer) {
        agreeButton.textContent = card.dataset.agreeAnswer;
      } else {
        agreeButton.textContent = "Agree";
      }

      if (card.dataset.disagreeAnswer) {
        disagreeButton.textContent = card.dataset.disagreeAnswer;
      } else {
        disagreeButton.textContent = "Disagree";
      }
    }

    function initCards(randomize) {
      // Randomize the cards in the DOM
      if (randomize) {
        const newCards = document.querySelectorAll(".swipeables-card:not(.removed)");
        const cardsArray = Array.from(newCards);
        cardsArray.sort(() => Math.random() - 0.5);
        cardsArray.forEach((card) => container.appendChild(card));
      }

      const newCards = document.querySelectorAll(
        ".swipeables-card:not(.removed)",
      );

      // Mark the first card as the top card
      if (newCards.length > 0) {
        newCards[0].classList.add("current");
        setButtonText(newCards[0]);
      } else {
      }

      newCards.forEach((card, index) => {
        card.style.zIndex = allCards.length - index;
        card.style.transform = `scale(${(20 - index) / 20}) translateY(-${30 * index}px)`;
        card.style.opacity = (10 - index) / 10;
      });

      container.classList.add("loaded");
    }

    initCards(true);

    agreeButton.addEventListener("click", () => {
      const currentCard = document.querySelector(".swipeables-card.current");
      if (!currentCard) return;


      // animate the card out to the right
      currentCard.style.transform = `translate(max(50dvw, 800px), 5px) rotate(180deg)`;

      currentCard.classList.remove("current");

      setTimeout(() => {
        currentCard.classList.add("removed");
        initCards();

        const event = new CustomEvent("voted", {
          detail: { card: currentCard, result: "agree" },
        });
        currentCard.dispatchEvent(event);
      }, 100);
    });

    disagreeButton.addEventListener("click", () => {
      const currentCard = document.querySelector(".swipeables-card.current");
      if (!currentCard) return;

      // animate the card out to the left
      currentCard.style.transform = `translate(min(-50dvw, -800px), 5px) rotate(-180deg)`;

      currentCard.classList.remove("current");

      setTimeout(() => {
        currentCard.classList.add("removed");
        initCards();

        const event = new CustomEvent("voted", {
          detail: { card: currentCard, result: "disagree" },
        });
        currentCard.dispatchEvent(event);
      }, 100);
    });

    allCards.forEach((card) => {
      let isMoving = false;

      let startX = 0;
      let startY = 0;
      let currentX = 0;
      let currentY = 0;
      let lastX = 0;
      let lastY = 0;
      let lastTime = 0;
      let velocityX = 0;
      let velocityY = 0;

      card.addEventListener("pointerdown", (e) => {
        if (isMobile) return;
        // Check if clicking a link
        if (e.target.tagName === "A") return;

        startX = e.clientX;
        startY = e.clientY;
        lastX = startX;
        lastY = startY;
        lastTime = Date.now();
        isMoving = true;
        card.classList.add("moving");
        card.style.transition = "none"; // Disable transitions during drag
        card.setPointerCapture(e.pointerId);
      });

      card.addEventListener("pointermove", (e) => {
        if (isMobile) return;
        if (!isMoving) return;

        currentX = e.clientX - startX;
        currentY = e.clientY - startY;

        const rotate = currentX * 0.03 * (currentY / 80);
        card.style.transform = `translate(${currentX}px, ${currentY}px) rotate(${rotate}deg)`;

        const opacity = Math.min(Math.abs(currentX) / 100, 0.3);
        card.style.setProperty("--swipe-opacity", opacity);

        // Remove previous classes
        card.classList.remove("swipe-left", "swipe-right");

        // Add appropriate class
        if (currentX > 0) {
          disagreeButton.classList.remove("active");
          agreeButton.classList.add("active");
          card.classList.add("swipe-right");
        } else {
          agreeButton.classList.remove("active");
          disagreeButton.classList.add("active");
          card.classList.add("swipe-left");
        }

        const now = Date.now();
        const timeDiff = now - lastTime;

        if (timeDiff > 0) {
          velocityX = (e.clientX - lastX) / timeDiff;
          velocityY = (e.clientY - lastY) / timeDiff;

          lastX = e.clientX;
          lastY = e.clientY;
          lastTime = now;
        }
      });

      card.addEventListener("pointerup", (e) => {
        if (isMobile) return;
        if (!isMoving) return;

        card.releasePointerCapture(e.pointerId);
        isMoving = false;
        card.classList.remove("moving", "swipe-left", "swipe-right");
        agreeButton.classList.remove("active");
        disagreeButton.classList.remove("active");
        card.style.transition = "transform 0.3s ease-in-out"; // Re-enable transitions

        const moveOutWidth = document.body.clientWidth;
        const keep = Math.abs(currentX) < 80 || Math.abs(velocityX) < 0.5;
        card.classList.toggle("removed", !keep);

        if (keep) {
          card.style.transform = "";
          card.classList.remove("swipe-left", "swipe-right");
          card.style.setProperty("--swipe-opacity", 0);
        } else {
          card.classList.remove("current");
          const endX = Math.max(
            Math.abs(velocityX) * moveOutWidth,
            moveOutWidth,
          );
          const toX = currentX > 0 ? endX : -endX;
          const endY = Math.abs(velocityY) * moveOutWidth;
          const toY = currentY > 0 ? endY : -endY;
          const rotate = currentX * 0.03 * (currentY / 80);

          card.style.transform = `translate(${toX}px, ${toY + currentY}px) rotate(${rotate}deg)`;
          initCards();

          if (currentX > 0) {
            const event = new CustomEvent("voted", {
              detail: { card, result: "agree" },
            });
            card.dispatchEvent(event);
          } else {
            const event = new CustomEvent("voted", {
              detail: { card, result: "disagree" },
            });
            card.dispatchEvent(event);
          }
        }
      });

      card.addEventListener("pointercancel", () => {
        if (isMobile) return;
        if (!isMoving) return;

        isMoving = false;
        card.classList.remove("moving");
        card.style.transition = "transform 0.3s ease-in-out";
        card.style.transform = ""; // Reset the transform to its original state

        // Remove previous classes
        card.classList.remove("swipe-left", "swipe-right");
        card.style.setProperty("--swipe-opacity", 0);
      });

      card.addEventListener("voted", (e) => {
        submitFeedback(e.detail.result, e.detail.card.dataset.statementId);

        // Is the last card?
        if (document.querySelectorAll(".swipeables-card:not(.removed)").length === 0) {
          document.querySelector(".no-more-cards").style.display = "block";
          document.querySelector(".swipeables-cards").style.display = "none";
          document.querySelector(".swipeable-actions").style.display = "none";
        }
      });
    });
  </script>

  <style>
    :global(.grecaptcha-badge) {
      visibility: hidden;
    }

    .no-more-cards {
      display: none;
    }

    .swipeables-cards {
      height: 600px;
      flex-grow: 1;
      display: flex;
      justify-content: center;
      align-items: flex-end;
      position: relative;
      overflow: visible;
    }

    .actions {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      margin-top: 1rem;
    }

    .actions > .button {
      color: hsl(0, 0%, 0%);
      text-decoration: none;
      text-align: center;
      padding-block: 0.5rem;
      padding-inline: 1rem;
      line-height: 1.5rem;

      font-size: 0.875rem;
      font-family: inherit;
      font-weight: 700;
      border: none;
      background: none;
      cursor: pointer;
      border-radius: 0.375rem;
      background-color: hsl(0, 0%, 80%);
    }

    .no-more-cards .button {
      color: white;
      background-color: hsl(0, 0%, 0%);
    }

    @media (hover: hover) {
      .actions > .button:hover {
        background-color: hsl(0, 0%, 85%);
      }
      .no-more-cards .button:hover {
        background-color: hsl(0, 0%, 15%);
      }
    }

    .swipeables-cards.loaded {
      opacity: 1;
    }

    .swipeables-card.removed {
      display: none;
    }

    .card,
    .swipeables-card {
      margin-top: 24px;
      padding: 1.5rem;
      padding-bottom: 1.5rem;

      border-radius: 1rem;
      overflow: hidden;

      display: inline-flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: flex-start;

      width: 80vw;
      height: 70vh;
      max-width: 345px;
      max-height: 500px;

      font-size: 2rem;
      font-weight: 700;
      text-wrap: pretty;
      will-change: transform;
      transition: transform 0.3s ease-in-out;
      cursor: grab;
      color: white;
      z-index: 10000;

      background: black;
      background-size: cover;
      background-position: center;
    }

    .card {
      justify-content: center;
      align-items: center;
    }

    .no-more-cards .card {
      cursor: auto;
    }

    .card img {
      max-width: 234px;
    }

    .swipeables-card {
      position: absolute;
    }

    .swipeables-card p {
      user-select: none;
    }

    .swipeables-card::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: transparent;
      opacity: 0;
      transition: opacity 0.2s ease;
      pointer-events: none;
      z-index: 1;
    }

    .swipeables-card.swipe-left::after,
    .swipeables-card.swipe-right::after {
      background-color: black;
      opacity: var(--swipe-opacity, 0);
    }

    .swipeables-card .source {
      display: block;
      margin-top: 16px;
      font-size: 0.875rem;
      font-weight: 500;
      color: white;
    }

    .swipeables-card a.source {
      text-decoration: underline;
    }

    .swipeables-card.moving {
      transition: none;
      cursor: grabbing;
    }

    .swipeables-card img {
      max-width: 100%;
    }

    .swipeables-card p {
      margin: 0px;
    }

  </style>
</section>
