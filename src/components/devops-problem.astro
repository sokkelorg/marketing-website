---
import { z } from 'zod';
import { client } from '../sanity-client.ts';

function ensureTrailingPunctuation(problem: string): string {
  if (problem.endsWith('.') || problem.endsWith('!')) {
    return problem;
  }

  return `${problem}.`;
}

const problems = z
  .array(z.string())
  .parse(await client.fetch(`*[_type == 'problem'].problem`))
  .map(ensureTrailingPunctuation);

const problemsJson = JSON.stringify(problems);
---

<span id="problem-container" data-problems={problemsJson}>
  <!-- Typewriter span goes here -->
</span>

<style is:global>
  .typewriter {
    color: #0000;
    background:
      linear-gradient(transparent, #0000 0) 10px 0,
      linear-gradient(#525252 0 0) 0 0;
    background-size: calc(var(--characters) * 1ch) 200%;
    background-clip: padding-box, text;
    background-repeat: no-repeat;
    animation: t calc(var(--characters) * 0.02s) steps(var(--characters))
      forwards;
  }

  @keyframes t {
    from {
      background-size: 0 200%;
    }
  }
</style>

<script>
  (() => {
    const container = document.getElementById('problem-container');
    if (container == null) {
      return;
    }

    const problemsJson = container.getAttribute('data-problems');
    if (problemsJson == null) {
      return;
    }

    const problems = JSON.parse(problemsJson);

    function getRandomProblem(): string {
      return problems[Math.floor(Math.random() * problems.length)];
    }

    // Track which problem we're currently showing, to avoid rendering it twice in a row.
    let problem = '';

    function getNextProblem(): string {
      let nextProblem = getRandomProblem();
      while (nextProblem === problem) {
        // Look for a new problem until we get one.
        nextProblem = getRandomProblem();
      }
      return nextProblem;
    }

    function refreshProblem() {
      problem = getNextProblem();

      const newSpan = document.createElement('span');
      newSpan.classList.add('typewriter');
      newSpan.innerText = problem;
      newSpan.style.setProperty('--characters', problem.length.toString());

      if (container == null) {
        return;
      }

      container.innerHTML = '';
      container.appendChild(newSpan);
    }

    refreshProblem();
    setInterval(refreshProblem, 7_000);
  })();
</script>
